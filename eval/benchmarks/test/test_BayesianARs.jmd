# Test **BayesianARs** module

This document tests the **BayesianARs** module.

To run

- make sure pwd() is set to benchmarks/test/ -> cd(".../test/")
- load the Weave package -> using Weave
- weave using the command weave("test_module.jmd"; out_path=:pwd, fig_path = "figures")


```julia; echo = false; results = "hidden"
#import Pkg
#Pkg.activate(".")
include("./../BayesianARs.jl")
using .BayesianARs
using Statistics, LinearAlgebra, Distributions, Plots
```

## Simulate data

Model is $y_t = \beta_0 + \beta_1 y_{t-1} + \beta_2 y_{t-2} + e_t; \: e_t \sim \mathcal{N}(0, \sigma^2)$

```julia
Nt = 300
Nh = 4
Np = 2

y, yᶠ_true, β, σ² = simulate_data(Nt, Nh);
```

## Prepare estimation

regressors **X**

```julia
# regressors
X = [ones(Nt-Np, 1) lags(y, Np)];
```
priors
```julia
m₀ = zeros(Np+1)
Q₀ = diagm(vcat(0.01, collect(1:Np)))
prior_β = MvNormalCanon(Q₀*m₀, Q₀)
prior_σ² = InverseGamma(3, 0.1);
```
initialize model type with OLS
```julia
β_ols = (X'*X)\X'*y[Np+1:end] 
σ²_ols = var(y[Np+1:end]-X*β_ols)
ar_model = BayesianAR(y, X, Np, β_ols, σ²_ols, prior_β, prior_σ²);
```

## Estimate

```julia
β_hat, σ²_hat, yᶠ = gibbs_sampler(ar_model; Nh = 4);
```

## Plots

### Parameters $\beta$ and $\sigma^2$

```julia
histogram(hcat(β_hat', σ²_hat), bins = 100, label = "", title=["\$\\beta_0\$" "\$\\beta_1\$" "\$\\beta_2\$" "\$\\sigma^2\$"], layout = (2,2))
vline!([vcat(β, σ²)'], linewidth = 4, label = "", linecolor = :black, layout = (2, 2))
```

### Predictive densities

```julia
histogram(yᶠ', bins = 100, label = "", title=["h=1" "h=2" "h=3" "h=4"], layout = (2, 2))
vline!([yᶠ_true'], linewidth = 4, linecolor = :black, layout = (2, 2), label = "")
```

## Compare performance of mutable and immutable structs

Time execution of Gibbs Sampler with the mutable struct...

```julia
using BenchmarkTools
BenchmarkTools.DEFAULT_PARAMETERS.seconds = 200
@benchmark gibbs_sampler($ar_model; Nh = 4, Nreplic = 10, Nburnin = 10) samples = 100
```

... and with the immutable one

```julia
ar_immut = immutBayesianAR(y, X, Np, β_ols, [σ²_ols], prior_β, prior_σ²);
@benchmark gibbs_sampler($ar_immut; Nh = 4, Nreplic = 10, Nburnin = 10) samples = 100
```

The immutable struct is somewhat faster. Note also that they behave almost identically as it is possible to change the values of an array contained in an immutable struct, just not the entire array itself. E.g. one can overwrite the draw of β in the struct ar by ar.β[:] = Vector{typeof(β)0}! The only syntactic problems this causes is that σ² can no longer be of type Float64 but rather needs to be Vector{Float64} (of length 1) so that σ²[1] can be accessed and changed! In other cases, σ² needs to be "converted" to a scalar, e.g. when constructing the diagonal prior matrix Qₑ or when taking √σ². This is done by simply indexing, i.e. σ²[1]. In the case of √, sqrt.(σ²) would also work. 

This seems to be a nice work-around. However, one might consider putting in checks that σ² is actually a vector of length 1! 

## High memory allocation

Getting very high values for total memory allocation! Check components of Gibbs Sampler to see where this is coming from: 

```julia
BenchmarkTools.DEFAULT_PARAMETERS.seconds = 5 # set back to default value
@benchmark sample_β!($ar_model)
```

```julia
@benchmark sample_σ²!($ar_model)
```

```julia
@benchmark forecast($ar_model; Nh = 4)
```

